/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "tremulux_include.h"
#include "Filter.h"
#include "Oscillator.h"


using namespace tremulux;

class TremuluxGUI;

//==============================================================================
/**
*/

class TremuluxCore  : public AudioProcessor, public AudioProcessorValueTreeState::Listener
{
public:
    friend class TremuluxGUI;
    
    typedef enum {
        TWO_BARS = 0,
        ONE_BAR,
        HALF,
        DOTTED_QUARTER,
        QUARTER,
        TRIPLET_QUARTER,
        DOTTED_EIGHTH,
        EIGHTH,
        TRIPLET_EIGHTH,
        DOTTED_SIXTEENTH,
        SIXTEENTH,
        TRIPLET_SIXTEENTH,
        
        NUM_SYNC_OPTIONS
    } SYNC_OPTIONS;
    
    const float RATE_DIAL_RANGE = NUM_SYNC_OPTIONS - 1;
    const float ONE_BY_RATE_DIAL_RANGE = 1.0 / RATE_DIAL_RANGE;
    const float MIN_FREE_RATE = 0.1, MAX_FREE_RATE = 10.0;

    //==============================================================================
    TremuluxCore();
    ~TremuluxCore();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

//    int getNumParameters() override;
//    float getParameter (int index) override;
//    void setParameter (int index, float newValue) override;
//
//    const String getParameterName (int index) override;
//    const String getParameterText (int index) override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    
    void parameterChanged(const String &parameterID, float newValue) override;
    
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    AudioProcessorValueTreeState& getParameterManager();

    //==============================================================================
    
    void setGUI(TremuluxGUI* frontend);
    void clear();
    
    StringArray syncModeLabels;
    
    //==============================================================================

    void serialize(XmlElement& xml);

    void deserialize(XmlElement& xml);

    //==============================================================================

protected:
    TremuluxGUI* gui;
    CriticalSection callbackLock;
    
private:
    
    void updateTempo(const bool force = false);
    inline int getSyncMode(const int modID);
    float getSyncedRate(const int modID);
    float getUnsyncedRate(const int modID);
    void updateRates();
    
    //==============================================================================

    File logFile;
    FileLogger logger;
    
    float sampleRate, maxModRate;
    bool isStereo;
    
    std::shared_ptr<Wavetable<float> > sineTable;
    std::array<Sine<float>, NUM_MODS> mods;
    std::array<LowPass<float>, NUM_MODS> lowPasses;
    
    //==============================================================================
    // Parameters
    
    ScopedPointer<UndoManager> undoManager;
    ScopedPointer<AudioProcessorValueTreeState> parameterManager;
    
    static String mixParamID;
    static String bypassParamID;
    static String gainParamID;
    static String rateParamID[NUM_MODS];
    static String depthParamID[NUM_MODS];
    static String syncToggleParamID[NUM_MODS];
    
    std::atomic<bool> bypassData;
    std::atomic<float> mixData, gainData;
    std::atomic<unsigned int> interpData;
    std::array<std::atomic<float>, NUM_MODS> rateData;
    std::array<std::atomic<float>, NUM_MODS> depthData;
    std::array<std::atomic<bool>, NUM_MODS> syncToggleData;
    std::array<std::atomic<int>, NUM_MODS> syncModeData;

    //==============================================================================
    // Tempo Sync
    
    AudioPlayHead *transport;
    juce::AudioPlayHead::CurrentPositionInfo transportInfo;
    std::array<float, NUM_SYNC_OPTIONS> syncFactors;
    std::atomic<float> lastBPM;
    std::atomic<unsigned int> lastTimeSigDenominator, lastTimeSigNumerator;
    
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (TremuluxCore)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
